{"timestamp":"2025-05-02T16:03:01.493544","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-02T16:03:01.494188","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/iot-ex2-hotpath.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-02T16:03:01.675196Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.675873Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.676155Z","level":"info","event":"Current task name:get_sensors_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.676443Z","level":"info","event":"Dag name:temperature_hotpath","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.649297","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-05-02T16:03:01.675616","level":"info","event":"Connection Retrieved 'influxdb'","logger":"airflow.hooks.base"}
{"timestamp":"2025-05-02T16:03:01.675798","level":"info","event":"URI: http://influxdb:8086","logger":"airflow.task.hooks.airflow.providers.influxdb.hooks.influxdb.InfluxDBHook"}
{"timestamp":"2025-05-02T16:03:01.678621","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/influxdb_client/client/warnings.py:31: MissingPivotFunction: The query doesn't contains the pivot() function.\n\nThe result will not be shaped to optimal processing by pandas.DataFrame. Use the pivot() function by:\n\n    \n        from(bucket: \"iot-ex2\")\n        |> range(start: -1m)\n        |> filter(fn: (r) => r._measurement == \"sensors\")\n        |> filter(fn: (r) => r._field == \"t\")\n        |> sort(columns: [\"_time\"])\n         |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nYou can disable this warning by:\n    import warnings\n    from influxdb_client.client.warnings import MissingPivotFunction\n\n    warnings.simplefilter(\"ignore\", MissingPivotFunction)\n\nFor more info see:\n    - https://docs.influxdata.com/resources/videos/pivots-in-flux/\n    - https://docs.influxdata.com/flux/latest/stdlib/universe/pivot/\n    - https://docs.influxdata.com/flux/latest/stdlib/influxdata/influxdb/schema/fieldsascols/\n\n  warnings.warn(message, MissingPivotFunction)\n","logger":"py.warnings"}
{"timestamp":"2025-05-02T16:03:01.703325","level":"info","event":"Done. Returned value was: [{'t': 5.199999809265137, '_time': '2025-05-02 16:02:06.346236+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:11.655669+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:17.628648+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:24.772643+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:31.528092+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:38.312721+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:44.396809+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:49.760644+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 16:02:56.776594+00:00', 'sensorID': '1'}, {'t': 40.0, '_time': '2025-05-02 16:02:07.027481+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:12.310059+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:18.656767+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:25.733527+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:32.326238+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:39.288622+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:45.154227+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 16:02:50.573185+00:00', 'sensorID': '2'}]","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-05-02T16:03:01.703651","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019691bc-a266-7d29-beb1-ab5c25f96da5'), task_id='get_sensors_data', dag_id='temperature_hotpath', run_id='scheduled__2025-05-02T16:03:00+00:00', try_number=1, map_index=-1, hostname='7093941e5032', context_carrier={}, task=<Task(_PythonDecoratedOperator): get_sensors_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 5, 2, 16, 3, 0, 957673, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.733780Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.734274Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:03:01.734569Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): get_sensors_data>","chan":"stdout","logger":"task"}
