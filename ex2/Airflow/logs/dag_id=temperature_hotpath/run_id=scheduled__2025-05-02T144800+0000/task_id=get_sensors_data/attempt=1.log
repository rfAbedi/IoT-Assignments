{"timestamp":"2025-05-02T14:48:00.981566","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-02T14:48:00.982278","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/iot-ex2-hotpath.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-02T14:48:01.157903Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.158529Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.158794Z","level":"info","event":"Current task name:get_sensors_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.159027Z","level":"info","event":"Dag name:temperature_hotpath","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.132814","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-05-02T14:48:01.158309","level":"info","event":"Connection Retrieved 'influxdb'","logger":"airflow.hooks.base"}
{"timestamp":"2025-05-02T14:48:01.158518","level":"info","event":"URI: http://influxdb:8086","logger":"airflow.task.hooks.airflow.providers.influxdb.hooks.influxdb.InfluxDBHook"}
{"timestamp":"2025-05-02T14:48:01.171774","level":"info","event":"Done. Returned value was: [<FluxTable: 13 columns, 8 records>, <FluxTable: 13 columns, 7 records>]","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-05-02T14:48:01.172083","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('01969177-f659-781e-9187-69215e59cffe'), task_id='get_sensors_data', dag_id='temperature_hotpath', run_id='scheduled__2025-05-02T14:48:00+00:00', try_number=1, map_index=-1, hostname='7093941e5032', context_carrier={}, task=<Task(_PythonDecoratedOperator): get_sensors_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 5, 2, 14, 48, 0, 446414, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.172428","level":"error","event":"Task failed with exception","logger":"task","error_detail":[{"exc_type":"TypeError","exc_value":"cannot serialize object of type <class 'influxdb_client.client.flux_table.FluxTable'>","exc_notes":[],"syntax_error":null,"is_cause":false,"frames":[{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":827,"name":"run"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":1141,"name":"_push_xcom_if_needed"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/execution_time/task_runner.py","lineno":515,"name":"_xcom_push"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":64,"name":"set"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/sdk/bases/xcom.py","lineno":283,"name":"serialize_value"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":129,"name":"serialize"},{"filename":"/home/airflow/.local/lib/python3.12/site-packages/airflow/serialization/serde.py","lineno":185,"name":"serialize"}]}]}
{"timestamp":"2025-05-02T14:48:01.173462Z","level":"info","event":"Task instance in failure state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.173792Z","level":"info","event":"Task start","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.174066Z","level":"info","event":"Task:<Task(_PythonDecoratedOperator): get_sensors_data>","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T14:48:01.174296Z","level":"info","event":"Failure caused by cannot serialize object of type <class 'influxdb_client.client.flux_table.FluxTable'>","chan":"stdout","logger":"task"}
