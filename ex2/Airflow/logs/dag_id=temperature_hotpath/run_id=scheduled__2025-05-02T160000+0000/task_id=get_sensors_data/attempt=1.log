{"timestamp":"2025-05-02T16:00:01.254612","level":"info","event":"DAG bundles loaded: dags-folder, example_dags","logger":"airflow.dag_processing.bundles.manager.DagBundlesManager"}
{"timestamp":"2025-05-02T16:00:01.255327","level":"info","event":"Filling up the DagBag from /opt/airflow/dags/iot-ex2-hotpath.py","logger":"airflow.models.dagbag.DagBag"}
{"timestamp":"2025-05-02T16:00:01.488575Z","level":"info","event":"Task instance is in running state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.489062Z","level":"info","event":" Previous state of the Task instance: queued","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.489372Z","level":"info","event":"Current task name:get_sensors_data","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.489691Z","level":"info","event":"Dag name:temperature_hotpath","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.418147","level":"info","event":"Secrets backends loaded for worker","count":1,"backend_classes":["EnvironmentVariablesBackend"],"logger":"supervisor"}
{"timestamp":"2025-05-02T16:00:01.488981","level":"info","event":"Connection Retrieved 'influxdb'","logger":"airflow.hooks.base"}
{"timestamp":"2025-05-02T16:00:01.489209","level":"info","event":"URI: http://influxdb:8086","logger":"airflow.task.hooks.airflow.providers.influxdb.hooks.influxdb.InfluxDBHook"}
{"timestamp":"2025-05-02T16:00:01.492218","level":"warning","event":"/home/airflow/.local/lib/python3.12/site-packages/influxdb_client/client/warnings.py:31: MissingPivotFunction: The query doesn't contains the pivot() function.\n\nThe result will not be shaped to optimal processing by pandas.DataFrame. Use the pivot() function by:\n\n    \n        from(bucket: \"iot-ex2\")\n        |> range(start: -1m)\n        |> filter(fn: (r) => r._measurement == \"sensors\")\n        |> filter(fn: (r) => r._field == \"t\")\n        |> sort(columns: [\"_time\"])\n         |> pivot(rowKey:[\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n\nYou can disable this warning by:\n    import warnings\n    from influxdb_client.client.warnings import MissingPivotFunction\n\n    warnings.simplefilter(\"ignore\", MissingPivotFunction)\n\nFor more info see:\n    - https://docs.influxdata.com/resources/videos/pivots-in-flux/\n    - https://docs.influxdata.com/flux/latest/stdlib/universe/pivot/\n    - https://docs.influxdata.com/flux/latest/stdlib/influxdata/influxdb/schema/fieldsascols/\n\n  warnings.warn(message, MissingPivotFunction)\n","logger":"py.warnings"}
{"timestamp":"2025-05-02T16:00:01.519177","level":"info","event":"Done. Returned value was: [{'t': 5.199999809265137, '_time': '2025-05-02 15:59:05.290186+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:11.221089+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:17.884614+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:25.055009+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:31.349077+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:37.357855+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:42.663159+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:49.256761+00:00', 'sensorID': '1'}, {'t': 5.199999809265137, '_time': '2025-05-02 15:59:56.077377+00:00', 'sensorID': '1'}, {'t': 40.0, '_time': '2025-05-02 15:59:06.020383+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:12.128027+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:18.758563+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:25.865920+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:32.139499+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:38.059731+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:43.506350+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:50.208731+00:00', 'sensorID': '2'}, {'t': 40.0, '_time': '2025-05-02 15:59:57.044113+00:00', 'sensorID': '2'}]","logger":"airflow.task.operators.airflow.providers.standard.decorators.python._PythonDecoratedOperator"}
{"timestamp":"2025-05-02T16:00:01.519567","level":"info","event":"Pushing xcom","ti":"RuntimeTaskInstance(id=UUID('019691b9-e1c4-7125-a26e-65ccd81e0c71'), task_id='get_sensors_data', dag_id='temperature_hotpath', run_id='scheduled__2025-05-02T16:00:00+00:00', try_number=1, map_index=-1, hostname='7093941e5032', context_carrier={}, task=<Task(_PythonDecoratedOperator): get_sensors_data>, bundle_instance=LocalDagBundle(name=dags-folder), max_tries=0, start_date=datetime.datetime(2025, 5, 2, 16, 0, 0, 657308, tzinfo=TzInfo(UTC)), end_date=None, is_mapped=False)","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.564764Z","level":"info","event":"Task instance in success state","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.565253Z","level":"info","event":" Previous state of the Task instance: running","chan":"stdout","logger":"task"}
{"timestamp":"2025-05-02T16:00:01.565562Z","level":"info","event":"Task operator:<Task(_PythonDecoratedOperator): get_sensors_data>","chan":"stdout","logger":"task"}
